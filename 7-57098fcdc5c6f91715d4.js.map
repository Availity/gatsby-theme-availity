{"version":3,"sources":["webpack:///../gatsby-theme-docs/node_modules/@availity/page-header/PageHeader.js","webpack:///../gatsby-theme-docs/node_modules/@availity/page-header/index.js"],"names":["PageHeader","payerId","spaceName","spaceId","children","appName","appAbbr","iconColor","branded","crumbs","showFeedback","feedback","feedbackProps","titleProps","titleClassName","className","restTitleProps","RenderRightContent","renderRightContent","component","Tag","tag","clientId","iconSrc","iconAlt","homeUrl","props","spaceForSpaceID","useSpace","spaceForPayerID","spaceForPayerIDLoading","_space","payerLogo","logoAttrs","skeletonProps","width","height","spaceIds","payerIds","_spaceName","name","url","useMemo","React","active","classNames","data-testid","color","title","src","alt"],"mappings":"gVAQA,IAAMA,EAAa,SAAC,GAsBb,IArBLC,EAqBI,EArBJA,QACAC,EAoBI,EApBJA,UACAC,EAmBI,EAnBJA,QACAC,EAkBI,EAlBJA,SACAC,EAiBI,EAjBJA,QACAC,EAgBI,EAhBJA,QACAC,EAeI,EAfJA,UACAC,EAcI,EAdJA,QACAC,EAaI,EAbJA,OACUC,EAYN,EAZJC,SACAC,EAWI,EAXJA,cAWI,IAVJC,WAAyBC,EAUrB,EAVUC,UAA8BC,EAUxC,mBATgBC,EAShB,EATJC,mBACAC,EAQI,EARJA,UACKC,EAOD,EAPJC,IACAC,EAMI,EANJA,SACAC,EAKI,EALJA,QACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,QACAV,EAEI,EAFJA,UACGW,EACC,yOACWC,EAAoBC,YAD/B,WAEgEA,YAFhE,GAEWC,EAFX,QAEqCC,EAFrC,UAMEC,EAASJ,GAAf,EAEIK,EAAJ,KACA,KAAa,CACX,IAAMC,EAAY,CAChB9B,QADgB,EAEhBF,QAFgB,EAGhBc,UAHgB,gCAIhBmB,cAAe,CACbC,MADa,IAEbC,OAAQ,SAGZJ,EACEH,KACE,sBADFA,GAGE,uBACEQ,SAAUlC,EAAU,CAAH,QADnB,EAEEmC,SAAU,CAFZ,GAGEhB,SAAUA,GAEV,sBATNU,IAcF,IAAMO,EAAarC,GAAc6B,GAAUA,EAA3C,MACI5B,GAAJ,KACEM,EAAS,CACP,CAAE+B,KAAF,EAAoBC,IAAKtC,GAAO,wBAA4BA,KAIhE,IAAMQ,EAAW+B,mBACf,kBACE,qCACErC,QADF,EAEEU,UAAS,kCAAmCd,EAAO,OAA1C,KAHb,MAOA,CAACI,EAAQ,EARX,IAWA,OACE,kBAAC,IAAD,cACE,yBAAKU,UAAU,4BACZ4B,wBAGC,uBACElC,OADF,EAEEmC,OAAQvC,GAFV,EAGEoB,QAASA,IARjB,GAaE,uCACEV,UAAW8B,IAAW,+EADxB,GAKEC,cAAY,eALd,GAQE,mCACE/B,UAAW8B,IAAW,oEADxB,GAKEC,cAAY,qBALd,IAQI7C,GAAD,GACC,uBACEc,UADF,OAEE+B,cAFF,uBAGEC,MAHF,EAIEvC,QAJF,EAKEwC,MALF,EAMEC,IANF,EAOEC,IAAK1B,GAhBX,GAqBGpB,GAAY,wBAAIW,UAAU,QA7B/B,IA+BIE,EAMA,qBACEF,UADF,mBAEEiB,UAFF,EAGErB,SAAUA,IARZ,yBAAKI,UAAU,oBAAf,EAEGL,GAHJ,MAgDTV,eAA0B,CACxBqB,IADwB,MAIxBlB,QAJwB,KAKxBF,QALwB,KAMxBwB,QANwB,yBAOxBZ,WAAY,IAGd,QCtLA","file":"7-57098fcdc5c6f91715d4.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Breadcrumbs from '@availity/breadcrumbs';\nimport AppIcon from '@availity/app-icon';\nimport Feedback from '@availity/feedback';\nimport Spaces, { SpacesLogo, useSpace } from '@availity/spaces';\n\nconst PageHeader = ({\n  payerId,\n  spaceName,\n  spaceId,\n  children,\n  appName,\n  appAbbr,\n  iconColor,\n  branded,\n  crumbs,\n  feedback: showFeedback,\n  feedbackProps,\n  titleProps: { className: titleClassName, ...restTitleProps },\n  renderRightContent: RenderRightContent,\n  component,\n  tag: Tag,\n  clientId,\n  iconSrc,\n  iconAlt,\n  homeUrl,\n  className,\n  ...props\n}) => {\n  const { space: spaceForSpaceID } = useSpace(spaceId);\n  const { space: spaceForPayerID, loading: spaceForPayerIDLoading } = useSpace(\n    payerId\n  );\n\n  const _space = spaceForSpaceID || spaceForPayerID;\n\n  let payerLogo = null;\n  if (payerId) {\n    const logoAttrs = {\n      spaceId,\n      payerId,\n      className: 'float-md-right d-inline-block',\n      skeletonProps: {\n        width: 180,\n        height: '100%',\n      },\n    };\n    payerLogo =\n      spaceForPayerID || spaceForPayerIDLoading ? (\n        <SpacesLogo {...logoAttrs} />\n      ) : (\n        <Spaces\n          spaceIds={spaceId ? [spaceId] : undefined}\n          payerIds={[payerId]}\n          clientId={clientId}\n        >\n          <SpacesLogo {...logoAttrs} />\n        </Spaces>\n      );\n  }\n\n  const _spaceName = spaceName || (_space && _space.name);\n  if (spaceId || spaceName) {\n    crumbs = [\n      { name: _spaceName, url: spaceId && `/web/spaces/spaces/#/${spaceId}` },\n    ];\n  }\n\n  const feedback = useMemo(\n    () => (\n      <Feedback\n        appName={appName}\n        className={`float-md-right d-inline-block ${payerId ? 'mx-3' : ''}`}\n        {...feedbackProps}\n      />\n    ),\n    [appName, feedbackProps, payerId]\n  );\n\n  return (\n    <React.Fragment>\n      <div className=\"d-flex align-items-start\">\n        {React.isValidElement(crumbs) ? (\n          crumbs\n        ) : (\n          <Breadcrumbs\n            crumbs={crumbs}\n            active={appName || children}\n            homeUrl={homeUrl}\n          />\n        )}\n        {component}\n      </div>\n      <div\n        className={classNames(\n          'page-header page-header-brand d-flex justify-content-between align-items-end',\n          className\n        )}\n        data-testid=\"page-header\"\n        {...props}\n      >\n        <Tag\n          className={classNames(\n            'page-header-title page-header-left d-flex align-items-center mb-0',\n            titleClassName\n          )}\n          data-testid=\"page-header-title\"\n          {...restTitleProps}\n        >\n          {!payerId && appAbbr && (\n            <AppIcon\n              className=\"mr-2\"\n              data-testid=\"page-header-app-icon\"\n              color={iconColor}\n              branded={branded}\n              title={appName}\n              src={iconSrc}\n              alt={iconAlt}\n            >\n              {appAbbr}\n            </AppIcon>\n          )}\n          {children || <h1 className=\"mb-0\">{appName}</h1>}\n        </Tag>\n        {!RenderRightContent ? (\n          <div className=\"page-header-left\">\n            {payerLogo}\n            {showFeedback && feedback}\n          </div>\n        ) : (\n          <RenderRightContent\n            className=\"page-header-left\"\n            payerLogo={payerLogo}\n            feedback={feedback}\n          />\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nPageHeader.propTypes = {\n  className: PropTypes.string,\n  appName: PropTypes.string.isRequired,\n  spaceName: PropTypes.string,\n  spaceId: PropTypes.string,\n  appAbbr: PropTypes.string,\n  iconColor: PropTypes.string,\n  branded: PropTypes.bool,\n  payerId: PropTypes.string,\n  component: PropTypes.element,\n  feedback: PropTypes.bool,\n  feedbackProps: PropTypes.shape({ ...Feedback.propTypes }),\n  titleProps: PropTypes.object,\n  children: PropTypes.node,\n  crumbs: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        url: PropTypes.string,\n      })\n    ),\n    PropTypes.node,\n  ]),\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  renderRightContent: PropTypes.func,\n  homeUrl: PropTypes.string,\n  clientId: PropTypes.string,\n  iconSrc: PropTypes.string,\n  iconAlt: PropTypes.string,\n};\n\nPageHeader.defaultProps = {\n  tag: 'div',\n  // SpaceId and payerId are defaulted to null to prevent `useSpace` from\n  // returning a space we may not want\n  spaceId: null,\n  payerId: null,\n  homeUrl: '/public/apps/dashboard',\n  titleProps: {},\n};\n\nexport default PageHeader;\n","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n"],"sourceRoot":""}